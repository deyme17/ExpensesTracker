# statistics_screen.py
from kivy.uix.screenmanager import Screen, SlideTransition
from kivy.properties import StringProperty, BooleanProperty, NumericProperty, ListProperty, ObjectProperty
from kivy.animation import Animation
from kivy.clock import Clock
from kivy.lang import Builder
from kivy.metrics import dp, sp
from kivy.utils import get_color_from_hex
from kivy.core.window import Window
from kivy.uix.widget import Widget
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.boxlayout import BoxLayout
from kivy.graphics import Color, Rectangle, Ellipse, RoundedRectangle, Line

# –ó–∞–≥—Ä—É–∂–∞–µ–º KV —Ñ–∞–π–ª
Builder.load_string('''
#:import get_color_from_hex kivy.utils.get_color_from_hex
#:import SlideTransition kivy.uix.screenmanager.SlideTransition
#:import dp kivy.metrics.dp
#:import Clock kivy.clock.Clock
#:import Animation kivy.animation.Animation

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ auth_screen.py)
#:set primary_color get_color_from_hex('#FF7043')      # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
#:set secondary_color get_color_from_hex('#0F7055')    # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
#:set accent_color get_color_from_hex('#FFB74D')       # –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
#:set bg_color get_color_from_hex('#062925')           # –§–æ–Ω (—Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π)
#:set text_light get_color_from_hex('#FFFFFF')         # –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç
#:set text_dark get_color_from_hex('#212121')          # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
#:set hint_color get_color_from_hex('#B0BEC5')         # –°–µ—Ä—ã–π –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
#:set card_color get_color_from_hex('#0A4035')         # –¶–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
#:set error_color get_color_from_hex('#F44336')        # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
#:set success_color get_color_from_hex('#66BB6A')      # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞
#:set income_color get_color_from_hex('#66BB6A')       # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
#:set expense_color get_color_from_hex('#F44336')      # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤

# –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
<ChartButton@ToggleButton>:
    group: 'chart_type'
    background_color: 0, 0, 0, 0
    color: text_light if self.state == 'down' else hint_color
    font_size: '15sp'
    bold: self.state == 'down'
    allow_no_selection: False
    
    canvas.before:
        Color:
            rgba: primary_color if self.state == 'down' else (card_color[0]+0.1, card_color[1]+0.1, card_color[2]+0.1, 1)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(8)]
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞
        Color:
            rgba: accent_color if self.state == 'down' else (0, 0, 0, 0)
        Line:
            rounded_rectangle: [self.x, self.y, self.width, self.height, dp(8)]
            width: dp(1.5)
    
    # –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–∂–∞—Ç–∏—è
    on_press: 
        self.background_color = 0, 0, 0, 0.1
        Animation(background_color=(0, 0, 0, 0), d=0.3).start(self)

# –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
<StatsTable@GridLayout>:
    cols: 2
    padding: dp(10)
    spacing: dp(10)
    canvas.before:
        Color:
            rgba: card_color
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(12)]
        
        # –õ–µ–≥–∫–∞—è –æ–±–≤–æ–¥–∫–∞
        Color:
            rgba: 1, 1, 1, 0.05
        Line:
            rounded_rectangle: [self.x, self.y, self.width, self.height, dp(12)]
            width: 1

# –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ auth_screen)
<AnimatedBackground@Widget>:
    canvas.before:
        Color:
            rgba: bg_color
        Rectangle:
            pos: self.pos
            size: self.size
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        Color:
            rgba: secondary_color[0], secondary_color[1], secondary_color[2], 0.15
        Ellipse:
            pos: self.center_x - self.width*0.75, self.center_y - self.height*0.75
            size: self.width*1.5, self.height*1.5

# –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
<StatisticsScreen>:
    # –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–¥–∞ Python
    graph_container: graph_container
    histogram_btn: histogram_btn
    line_btn: line_btn
    pie_btn: pie_btn
    
    # –§–æ–Ω
    AnimatedBackground:
        id: animated_bg
        size_hint: 1, 1
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    BoxLayout:
        orientation: 'vertical'
        padding: dp(10)
        spacing: dp(10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
        BoxLayout:
            size_hint_y: None
            height: dp(60)
            padding: [dp(10), 0]
            
            # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            BoxLayout:
                size_hint_x: None
                width: dp(50)
                canvas.before:
                    Color:
                        rgba: accent_color[0], accent_color[1], accent_color[2], 0.2
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(10)]
                
                Label:
                    text: 'üìä'
                    font_size: '24sp'
            
            # –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            Label:
                text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
                color: text_light
                font_size: '24sp'
                bold: True
                text_size: self.size
                halign: 'left'
                valign: 'middle'
                padding_x: dp(15)
                
            # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
            Button:
                size_hint: None, None
                size: dp(40), dp(40)
                pos_hint: {'center_y': 0.5}
                background_color: 0, 0, 0, 0
                on_press: root.show_menu()
                
                canvas.before:
                    Color:
                        rgba: secondary_color
                    Line:
                        width: 1.5
                        circle: (self.center_x, self.center_y, min(self.width, self.height) / 2 - dp(5), 0, 360)
                    Line:
                        width: 1.5
                        points: [self.center_x - dp(5), self.center_y - dp(2), self.center_x + dp(5), self.center_y - dp(2)]
                    Line:
                        width: 1.5
                        points: [self.center_x - dp(5), self.center_y + dp(2), self.center_x + dp(5), self.center_y + dp(2)]
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        BoxLayout:
            id: graph_container
            orientation: 'vertical'
            size_hint_y: 0.5
            
            canvas.before:
                Color:
                    rgba: card_color
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [dp(12)]
                
                # –õ–µ–≥–∫–∞—è –æ–±–≤–æ–¥–∫–∞
                Color:
                    rgba: 1, 1, 1, 0.05
                Line:
                    rounded_rectangle: [self.x, self.y, self.width, self.height, dp(12)]
                    width: 1
        
        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        GridLayout:
            cols: 3
            size_hint_y: None
            height: dp(50)
            spacing: dp(10)
            padding: [dp(5), 0]
            
            ChartButton:
                id: histogram_btn
                text: '–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞'
                state: 'down'
                on_release: root.change_chart_type('histogram')
                
            ChartButton:
                id: line_btn
                text: '–õ—ñ–Ω—ñ–π–Ω–∏–π'
                on_release: root.change_chart_type('line')
                
            ChartButton:
                id: pie_btn
                text: '–ö—Ä—É–≥–æ–≤–∞'
                on_release: root.change_chart_type('pie')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        StatsTable:
            size_hint_y: 0.3
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            Label:
                text: '–ü–æ–∫–∞–∑–Ω–∏–∫'
                color: hint_color
                font_size: '16sp'
                bold: True
                text_size: self.size
                halign: 'left'
                valign: 'middle'
                
            Label:
                text: '–ó–Ω–∞—á–µ–Ω–Ω—è'
                color: hint_color
                font_size: '16sp'
                bold: True
                text_size: self.size
                halign: 'right'
                valign: 'middle'
            
            # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            Label:
                text: '–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è'
                color: text_light
                font_size: '16sp'
                text_size: self.size
                halign: 'left'
                valign: 'middle'
                
            Label:
                text: str(root.avg_value)
                color: primary_color
                font_size: '16sp'
                bold: True
                text_size: self.size
                halign: 'right'
                valign: 'middle'
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            Label:
                text: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ'
                color: text_light
                font_size: '16sp'
                text_size: self.size
                halign: 'left'
                valign: 'middle'
                
            Label:
                text: str(root.min_value)
                color: expense_color
                font_size: '16sp'
                bold: True
                text_size: self.size
                halign: 'right'
                valign: 'middle'
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            Label:
                text: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ'
                color: text_light
                font_size: '16sp'
                text_size: self.size
                halign: 'left'
                valign: 'middle'
                
            Label:
                text: str(root.max_value) 
                color: income_color
                font_size: '16sp'
                bold: True
                text_size: self.size
                halign: 'right'
                valign: 'middle'
        
        # –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è - —Ç–∞–∫–æ–π –∂–µ —Å—Ç–∏–ª—å, –∫–∞–∫ –Ω–∞ main screen
        BoxLayout:
            size_hint_y: None
            height: dp(60)
            spacing: dp(5)
            
            # –ö–Ω–æ–ø–∫–∞ "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
            Button:
                text: '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó'
                background_color: 0, 0, 0, 0
                color: text_light
                
                canvas.before:
                    Color:
                        rgba: card_color
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(10)]
                
                on_press: root.go_to_transactions()
            
            # –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            Button:
                text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
                background_color: 0, 0, 0, 0
                color: primary_color
                bold: True
                
                canvas.before:
                    Color:
                        rgba: card_color
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(10)]
                    
                    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                    Color:
                        rgba: primary_color
                    Rectangle:
                        pos: self.x + dp(10), self.y + dp(5)
                        size: self.width - dp(20), dp(2)
''')

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
class HistogramWidget(Widget):
    def __init__(self, data=None, **kwargs):
        super(HistogramWidget, self).__init__(**kwargs)
        self.data = data or []
        self.bind(pos=self.update_canvas, size=self.update_canvas)
    
    def update_canvas(self, *args):
        self.canvas.clear()
        if not self.data:
            return
        
        with self.canvas:
            # –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
            Color(0.04, 0.25, 0.21, 1)  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            Rectangle(pos=self.pos, size=self.size)
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ –æ—Å–∏
            Color(0.7, 0.7, 0.7, 1)  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–µ–π
            Line(points=[self.x + dp(40), self.y + dp(20), 
                         self.x + dp(40), self.y + self.height - dp(20)])  # –û—Å—å Y
            Line(points=[self.x + dp(40), self.y + dp(20), 
                         self.x + self.width - dp(20), self.y + dp(20)])  # –û—Å—å X
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            max_value = max([item['value'] for item in self.data])
            
            # –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±–∏–∫–∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            bar_width = (self.width - dp(70)) / len(self.data)
            
            for i, item in enumerate(self.data):
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç–æ–ª–±–∏–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—é
                bar_height = (item['value'] / max_value) * (self.height - dp(50))
                
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–æ–ª–±–∏–∫–∞
                x1 = self.x + dp(50) + i * bar_width
                y1 = self.y + dp(20)
                
                # –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±–∏–∫
                Color(*get_color_from_hex('#FF7043')[:3], 1)  # primary_color
                Rectangle(pos=(x1, y1), size=(bar_width * 0.7, bar_height))
                
                # –ü–æ–¥–ø–∏—Å—å –Ω–∞ –æ—Å–∏ X
                label = Label(
                    text=item['name'],
                    size=(bar_width, dp(20)),
                    pos=(x1, self.y),
                    color=(0.8, 0.8, 0.8, 1),
                    font_size='10sp'
                )
                self.add_widget(label)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ Y
            for i in range(5):
                # –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏
                value = int((i / 4) * max_value)
                y_pos = self.y + dp(20) + (i / 4) * (self.height - dp(50))
                
                # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–µ—Ç–∫–∏
                Color(0.5, 0.5, 0.5, 0.3)
                Line(points=[self.x + dp(40), y_pos, self.x + self.width - dp(20), y_pos])
                
                # –ü–æ–¥–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è
                label = Label(
                    text=str(value),
                    size=(dp(35), dp(20)),
                    pos=(self.x, y_pos - dp(10)),
                    color=(0.8, 0.8, 0.8, 1),
                    font_size='10sp'
                )
                self.add_widget(label)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
class LineChartWidget(Widget):
    def __init__(self, data=None, **kwargs):
        super(LineChartWidget, self).__init__(**kwargs)
        self.data = data or []
        self.bind(pos=self.update_canvas, size=self.update_canvas)
    
    def update_canvas(self, *args):
        self.canvas.clear()
        if not self.data:
            return
        
        with self.canvas:
            # –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
            Color(0.04, 0.25, 0.21, 1)  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            Rectangle(pos=self.pos, size=self.size)
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ –æ—Å–∏
            Color(0.7, 0.7, 0.7, 1)  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–µ–π
            Line(points=[self.x + dp(40), self.y + dp(20), 
                         self.x + dp(40), self.y + self.height - dp(20)])  # –û—Å—å Y
            Line(points=[self.x + dp(40), self.y + dp(20), 
                         self.x + self.width - dp(20), self.y + dp(20)])  # –û—Å—å X
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            max_value = max([item['value'] for item in self.data])
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –ª–∏–Ω–∏–∏
            points = []
            x_step = (self.width - dp(70)) / (len(self.data) - 1) if len(self.data) > 1 else 0
            
            for i, item in enumerate(self.data):
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏
                x = self.x + dp(50) + i * x_step
                y = self.y + dp(20) + (item['value'] / max_value) * (self.height - dp(50))
                points.extend([x, y])
                
                # –ü–æ–¥–ø–∏—Å—å –Ω–∞ –æ—Å–∏ X
                label = Label(
                    text=item['name'],
                    size=(x_step, dp(20)),
                    pos=(x - x_step/2, self.y),
                    color=(0.8, 0.8, 0.8, 1),
                    font_size='10sp'
                )
                self.add_widget(label)
                
                # –¢–æ—á–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
                Color(*get_color_from_hex('#FFB74D')[:3], 1)  # accent_color
                Ellipse(pos=(x - dp(4), y - dp(4)), size=(dp(8), dp(8)))
            
            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
            Color(*get_color_from_hex('#FFB74D')[:3], 1)  # accent_color
            Line(points=points, width=dp(2))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ Y
            for i in range(5):
                # –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏
                value = int((i / 4) * max_value)
                y_pos = self.y + dp(20) + (i / 4) * (self.height - dp(50))
                
                # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–µ—Ç–∫–∏
                Color(0.5, 0.5, 0.5, 0.3)
                Line(points=[self.x + dp(40), y_pos, self.x + self.width - dp(20), y_pos])
                
                # –ü–æ–¥–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è
                label = Label(
                    text=str(value),
                    size=(dp(35), dp(20)),
                    pos=(self.x, y_pos - dp(10)),
                    color=(0.8, 0.8, 0.8, 1),
                    font_size='10sp'
                )
                self.add_widget(label)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
class PieChartWidget(Widget):
    def __init__(self, data=None, **kwargs):
        super(PieChartWidget, self).__init__(**kwargs)
        self.data = data or []
        self.bind(pos=self.update_canvas, size=self.update_canvas)
    
    def update_canvas(self, *args):
        self.canvas.clear()
        if not self.data:
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        self.clear_widgets()
        
        with self.canvas:
            # –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
            Color(0.04, 0.25, 0.21, 1)  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            Rectangle(pos=self.pos, size=self.size)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            total = sum([item['value'] for item in self.data])
            
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            colors = [
                get_color_from_hex('#FF7043'),  # primary_color
                get_color_from_hex('#FFB74D'),  # accent_color
                get_color_from_hex('#66BB6A'),  # success_color
                get_color_from_hex('#42A5F5'),  # –≥–æ–ª—É–±–æ–π
                get_color_from_hex('#EC407A'),  # —Ä–æ–∑–æ–≤—ã–π
                get_color_from_hex('#AB47BC')   # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            ]
            
            # –†–∏—Å—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            center_x = self.x + self.width * 0.35
            center_y = self.y + self.height * 0.5
            radius = min(self.width, self.height) * 0.35
            
            # –ù–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
            start_angle = 0
            
            # –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            for i, item in enumerate(self.data):
                # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
                angle_size = item['value'] / total * 360
                
                # –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
                Color(*colors[i % len(colors)][:3], 1)
                
                # –î–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∫—Ç–æ—Ä
                self._draw_sector(center_x, center_y, radius, start_angle, start_angle + angle_size)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                start_angle += angle_size
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
            legend_x = self.x + self.width * 0.65
            legend_y = self.y + self.height * 0.8
            
            for i, item in enumerate(self.data):
                # –†–∏—Å—É–µ–º —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
                Color(*colors[i % len(colors)][:3], 1)
                Rectangle(pos=(legend_x, legend_y - i * dp(25)), size=(dp(15), dp(15)))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                percent = item['value'] / total * 100
                label = Label(
                    text=f"{item['name']}: {percent:.1f}%",
                    size=(dp(150), dp(20)),
                    pos=(legend_x + dp(20), legend_y - i * dp(25) - dp(10)),
                    color=(1, 1, 1, 1),
                    font_size='12sp',
                    halign='left',
                    text_size=(dp(150), dp(20))
                )
                self.add_widget(label)
    
    def _draw_sector(self, center_x, center_y, radius, start_angle, end_angle):
        """–†–∏—Å—É–µ—Ç —Å–µ–∫—Ç–æ—Ä –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        from math import sin, cos, radians
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–≥–ª—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
        start_rad = radians(start_angle)
        end_rad = radians(end_angle)
        
        # –¢–æ—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞
        points = [center_x, center_y]  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ü–µ–Ω—Ç—Ä–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –Ω–∞—á–∞–ª–∞ –¥—É–≥–∏
        points.extend([
            center_x + radius * cos(start_rad),
            center_y + radius * sin(start_rad)
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–≥–∏
        # –ß–µ–º –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫, —Ç–µ–º –±–æ–ª–µ–µ –≥–ª–∞–¥–∫–∞—è –¥—É–≥–∞
        steps = max(1, int((end_angle - start_angle) / 5))  # –®–∞–≥ –≤ 5 –≥—Ä–∞–¥—É—Å–æ–≤
        for i in range(1, steps + 1):
            angle = start_rad + (end_rad - start_rad) * i / steps
            points.extend([
                center_x + radius * cos(angle),
                center_y + radius * sin(angle)
            ])
        
        # –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –≤–µ–µ—Ä
        self.canvas.add(Color(1, 1, 1, 0.1))  # –°–≤–µ—Ç–ª–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        mesh = self.canvas.add(Line(points=points, width=dp(2), joint='round', close=True))

class StatisticsScreen(Screen):
    """–≠–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    # –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å KV
    current_chart_type = StringProperty('histogram')
    avg_value = NumericProperty(0)
    min_value = NumericProperty(0)
    max_value = NumericProperty(0)
    
    def __init__(self, **kwargs):
        super(StatisticsScreen, self).__init__(**kwargs)
        self.name = 'statistics'
        self.chart_data = [
            {'name': '–°—ñ—á', 'value': 4000, 'month': 1},
            {'name': '–õ—é—Ç', 'value': 3000, 'month': 2},
            {'name': '–ë–µ—Ä', 'value': 6000, 'month': 3},
            {'name': '–ö–≤—ñ', 'value': 8000, 'month': 4},
            {'name': '–¢—Ä–∞', 'value': 5000, 'month': 5},
            {'name': '–ß–µ—Ä', 'value': 7000, 'month': 6}
        ]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        self._update_stats()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.opacity = 0
        Animation(opacity=1, d=0.8).start(self)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–æ–Ω–æ–≤—ã—Ö —á–∞—Å—Ç–∏—Ü
        Clock.schedule_once(self._animate_particles, 0.5)
    
    def on_enter(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ
        Clock.schedule_once(self._update_chart, 0.1)
    
    def _animate_particles(self, dt):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –Ω–∞ —Ñ–æ–Ω–µ (–∫–∞–∫ –≤ auth_screen)"""
        import random
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        for _ in range(15):
            particle = Widget(
                size_hint=(None, None),
                size=(dp(3), dp(3)),
                pos_hint={'x': random.random(), 'y': random.random()}
            )
            
            with particle.canvas:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
                color_choice = random.choice([
                    get_color_from_hex('#FF7043'),  # Primary
                    get_color_from_hex('#FFB74D'),  # Accent
                    get_color_from_hex('#0F7055'),  # Secondary
                    get_color_from_hex('#FFFFFF')   # White
                ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                r, g, b = color_choice[0:3]
                alpha = random.uniform(0.1, 0.4)
                
                Color(r, g, b, alpha)
                Ellipse(pos=particle.pos, size=particle.size)
            
            self.add_widget(particle)
            
            # –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—É
            anim_duration = random.uniform(5, 15)
            anim_x = random.uniform(0, 1)
            anim_y = random.uniform(0, 1)
            
            anim = Animation(
                pos_hint={'x': anim_x, 'y': anim_y},
                duration=anim_duration
            )
            anim.repeat = True
            anim.start(particle)
    
    def change_chart_type(self, chart_type):
        """–ú–µ–Ω—è–µ—Ç —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if self.current_chart_type == chart_type:
            return
            
        self.current_chart_type = chart_type
        
        # –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        self.graph_container.opacity = 0
        
        def update_and_show(dt):
            self._update_chart()
            Animation(opacity=1, d=0.5).start(self.graph_container)
            
        Clock.schedule_once(update_and_show, 0.3)
    
    def _update_chart(self, *args):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.graph_container.clear_widgets()
        
        if self.current_chart_type == 'histogram':
            chart = HistogramWidget(data=self.chart_data)
        elif self.current_chart_type == 'line':
            chart = LineChartWidget(data=self.chart_data)
        elif self.current_chart_type == 'pie':
            chart = PieChartWidget(data=self.chart_data)
        else:
            chart = Widget()  # –ü—É—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
        self.graph_container.add_widget(chart)
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        values = [item['value'] for item in self.chart_data]
        
        self.avg_value = sum(values) / len(values)
        self.min_value = min(values)
        self.max_value = max(values)
    
    def go_to_transactions(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        self.manager.transition = SlideTransition(direction='right')
        self.manager.current = 'main_screen'
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–ª—å–∫–æ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤—ã—Ö–æ–¥–∞"""
        popup = Popup(
            title='–ú–µ–Ω—é',
            size_hint=(0.7, 0.2),
            background='',
            background_color=(0, 0, 0, 0)
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content = BoxLayout(
            orientation='vertical',
            spacing=dp(10),
            padding=dp(10)
        )
        
        # –°—Ç–∏–ª–∏–∑—É–µ–º –ø–æ–ø–∞–ø
        with popup.canvas.before:
            Color(rgba=get_color_from_hex('#0A4035'))
            RoundedRectangle(pos=popup.pos, size=popup.size, radius=[dp(10)])
            
            # –û—Ä–∞–Ω–∂–µ–≤–∞—è –ª–∏–Ω–∏—è —Å–≤–µ—Ä—Ö—É
            Color(rgba=get_color_from_hex('#FF7043'))
            RoundedRectangle(
                pos=(popup.x + dp(10), popup.y + popup.height - dp(3)),
                size=(popup.width - dp(20), dp(3)),
                radius=[dp(1.5)]
            )
        
        popup.title_color = get_color_from_hex('#FFFFFF')
        popup.title_size = sp(18)
        
        # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        exit_btn = Button(
            text='–í–∏—Ö—ñ–¥',
            background_color=get_color_from_hex('#D8F3EB'),
            color=get_color_from_hex('#0A4035'),
            size_hint_y=None,
            height=dp(45),
            font_size=sp(16)
        )
        exit_btn.bind(on_press=lambda x: [popup.dismiss(), self.exit_app()])
        content.add_widget(exit_btn)
        
        popup.content = content
        popup.open()
    
    def exit_app(self):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        from kivy.app import App
        App.get_running_app().stop()

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
if __name__ == '__main__':
    from kivy.app import App
    
    class TestStatisticsApp(App):
        def build(self):
            return StatisticsScreen()
            
    TestStatisticsApp().run()